{"version":3,"file":"static/js/963.ab812af5.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/GlobalStyle.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactListItem.jsx","components/ContactList/ContactList.jsx","pages/Contacts.js"],"sourcesContent":["export const getContacts = state => state.contacts;\n\nexport const getStatusFilter = state => state.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n","import { createGlobalStyle } from 'styled-components';\nimport styled from 'styled-components';\nimport 'modern-normalize';\n\nexport const GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    background-color: whitesmoke;\n  }\n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n      monospace;\n  }\n\n  ul {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\np,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  margin: 0;\n}\n\n`;\nexport const Container = styled.div`\n  padding: 20px;\n`;\n\nexport const Title = styled.h2`\n  margin-bottom: 20px;\n`;\n","import styled from 'styled-components';\nimport { Form as FormikForm, Field as FormikField } from 'formik';\n\nexport const Form = styled(FormikForm)`\n  width: 500px;\n  padding: 20px;\n\n  border: 1px solid black;\n  margin-bottom: 20px;\n`;\n\nexport const FormLabel = styled.label`\n  display: block;\n  font-weight: 500;\n  font-size: 20px;\n  margin-bottom: 15px;\n`;\n\nexport const FormField = styled(FormikField)`\n  display: block;\n  margin-top: 5px;\n`;\n","import { getContacts } from 'redux/contacts/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { addContact } from 'redux/contacts/operations';\nimport { object, string } from 'yup';\nimport { Formik } from 'formik';\nimport { FormField, Form, FormLabel } from './ContactForm.styled';\n\nlet userSchema = object({\n  name: string().required(),\n  number: string().required(),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const { contacts } = useSelector(getContacts);\n\n  const handleSubmit = (values, actions) => {\n    const nameInContacts = contacts.find(\n      contact => contact.name.toLowerCase() === values.name.toLowerCase()\n    );\n    if (nameInContacts) {\n      alert(`${values.name} is already in contacts`);\n      actions.resetForm();\n      return;\n    }\n    console.log(values);\n    dispatch(addContact(values));\n    actions.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      validationSchema={userSchema}\n      onSubmit={handleSubmit}\n    >\n      <Form autoComplete=\"off\">\n        <FormLabel htmlFor=\"name\">\n          Name\n          <FormField type=\"text\" name=\"name\" required />\n        </FormLabel>\n        <FormLabel htmlFor=\"number\">\n          Number\n          <FormField type=\"tel\" name=\"number\" required />\n        </FormLabel>\n\n        <button type=\"submit\">Submit</button>\n      </Form>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterLabel = styled.label`\n  display: block;\n  margin-bottom: 15px;\n`;\nexport const FilterInput = styled.input`\n  display: block;\n  margin-top: 5px;\n`;\n","import { useDispatch } from 'react-redux';\nimport { filterList } from 'redux/contacts/filterSlice';\n\nimport { FilterLabel, FilterInput } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleFilter = ({ target: { value } }) => {\n    dispatch(filterList(value));\n  };\n\n  return (\n    <FilterLabel>\n      Find contact by name\n      <FilterInput type=\"text\" name=\"filter\" onChange={handleFilter} />\n    </FilterLabel>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContactItem = styled.div`\n  margin-bottom: 10px;\n`;\n\nexport const Contact = styled.span`\n  margin-right: 10px;\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { ContactItem, Contact } from './ContactList.styled';\n\nexport const ContactListItem = ({ contact }) => {\n  const dispatch = useDispatch();\n  const onDelete = () => dispatch(deleteContact(contact.id));\n\n  return (\n    <ContactItem>\n      <Contact>{contact.name}</Contact>\n      <Contact>{contact.number}</Contact>\n      <button type=\"button\" onClick={onDelete}>\n        Delete\n      </button>\n    </ContactItem>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n  }),\n};\n","import { useSelector } from 'react-redux';\nimport { getContacts, getStatusFilter } from 'redux/contacts/selectors';\n\nimport { ContactListItem } from './ContactListItem';\n\nexport const ContactList = () => {\n  const { contacts, isLoading, error } = useSelector(getContacts);\n  const filter = useSelector(getStatusFilter);\n  const findNameByFilter = () => {\n    const findName = contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase())\n    );\n    return findName;\n  };\n\n  return (\n    <ul>\n      {isLoading && !error && <b>Request in progress...</b>}\n      {error && <b>{error}</b>}\n      {findNameByFilter().map(contact => {\n        return (\n          <li key={contact.id}>\n            <ContactListItem contact={contact} />\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { Container, GlobalStyle, Title } from 'components/GlobalStyle';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <Container>\n        <Title>Phonebook</Title>\n        <ContactForm />\n        <Title>Contacts</Title>\n        <Filter />\n        <div>{isLoading && 'Request in progress...'}</div>\n        <ContactList />\n        <GlobalStyle />\n      </Container>\n    </>\n  );\n}\n"],"names":["getContacts","state","contacts","getStatusFilter","filter","selectIsLoading","isLoading","GlobalStyle","createGlobalStyle","Container","styled","Title","Form","FormikForm","FormLabel","FormField","FormikField","userSchema","object","name","string","required","number","ContactForm","dispatch","useDispatch","useSelector","initialValues","validationSchema","onSubmit","values","actions","find","contact","toLowerCase","alert","resetForm","console","log","addContact","autoComplete","htmlFor","type","FilterLabel","FilterInput","Filter","onChange","value","target","filterList","ContactItem","Contact","ContactListItem","onClick","deleteContact","id","propTypes","PropTypes","ContactList","error","includes","map","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}